@inject IBookRepository BookRepository


<EditForm Model="@book" OnValidSubmit="@OnValidSubmitt">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Book Name:</label>
        <div>
            <InputText @bind-Value="@book.Name" />
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Author:</label>
            <div>
                <InputText @bind-Value="@book.Author" />
            </div>
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Description:</label>
            <div>
                <InputText @bind-Value="@book.Description" />
            </div>
        </div>
    </div>
    
    <InputSelect @bind-Value="@book.State" class="form-select">
        @foreach(var state in states)
        {
            <option value="@state"> @state.StateName</option>
        }
    </InputSelect>
    <button type="submit" class="btn btn-success">
        @ButtonText
    </button>

</EditForm>



@code {
    [Parameter] public Book book { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmitt { get; set; }

    List<State> states = new();

    protected override async Task OnInitializedAsync()
    {
        states = await BookRepository.GetAllStates();
    }
}